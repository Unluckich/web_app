import os
import logging
import asyncio
import threading
import time
import redis
from flask import Flask, render_template, request, redirect, url_for, abort, make_response
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.fernet import Fernet
from telegram import Bot
from base64 import b64decode
from asyncio import run_coroutine_threadsafe

# =================== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===================
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
KEYS_DIR = os.path.join(BASE_DIR, "keys")
PRIVATE_KEY_PATH = os.path.join(KEYS_DIR, "private_key.pem")
PUBLIC_KEY_PATH = os.path.join(KEYS_DIR, "public_key.pem")
FERNET_KEY_PATH = os.path.join(KEYS_DIR, "fernet.key")

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "7888461204:AAEf1X2YtlV4-DMc6A5LQuQAqMU7bTJ4Tdg")
ADMIN_USER_IDS = [797316319]

# Redis settings
REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_DB = int(os.getenv("REDIS_DB", 0))
QUEUE_KEY = "telegram_queue"
# ======================================================

app = Flask(__name__)
app.logger.setLevel(logging.INFO)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis
redis_client = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, db=REDIS_DB)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª—é—á–∞ Fernet –¥–ª—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è —á–µ—Ä–≥–∏

def load_fernet_key():
    if not os.path.exists(FERNET_KEY_PATH):
        key = Fernet.generate_key()
        with open(FERNET_KEY_PATH, "wb") as f:
            f.write(key)
    else:
        with open(FERNET_KEY_PATH, "rb") as f:
            key = f.read()
    return key

fernet = Fernet(load_fernet_key())

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram Bot API (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π Bot)
bot = Bot(token=TELEGRAM_BOT_TOKEN)
bot_loop = asyncio.new_event_loop()

# =================== –§—É–Ω–∫—Ü—ñ—ó ===================

def load_private_key():
    with open(PRIVATE_KEY_PATH, "rb") as key_file:
        return serialization.load_pem_private_key(
            key_file.read(), password=None
        )

@app.after_request
def add_no_cache_headers(response):
    response.headers["Cache-Control"] = "no-store, no-cache, must-revalidate, max-age=0"
    response.headers["Pragma"] = "no-cache"
    response.headers["Expires"] = "0"
    return response

@app.route("/report", methods=["GET"])
def report_form():
    try:
        with open(PUBLIC_KEY_PATH, "r") as f:
            public_pem = f.read()
    except FileNotFoundError:
        abort(500, description="–ü—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.")
    return render_template("report.html", public_key=public_pem)

@app.route("/submit", methods=["POST"])
def submit_report():
    encrypted_b64 = request.form.get("encrypted_message")
    if not encrypted_b64:
        abort(400, description="–ù–µ –Ω–∞–¥—ñ–π—à–ª–æ –ø–æ–ª–µ encrypted_message.")

    try:
        encrypted_bytes = b64decode(encrypted_b64)
    except Exception as e:
        app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ dekod—É–≤–∞–Ω–Ω—è base64: {e}")
        abort(400, description="–ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç).")

    private_key = load_private_key()
    try:
        decrypted = private_key.decrypt(
            encrypted_bytes,
            padding.PKCS1v15()
        )
        plain_text = decrypted.decode("utf-8")
    except Exception as e:
        app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∫–∏: {e}")
        abort(400, description="–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

    # –®–∏—Ñ—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è Redis-—á–µ—Ä–≥–∏
    payload = plain_text.encode('utf-8')
    encrypted_payload = fernet.encrypt(payload)
    redis_client.lpush(QUEUE_KEY, encrypted_payload)
    app.logger.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ —ñ –¥–æ–¥–∞–Ω–æ –≤ Redis-—á–µ—Ä–≥—É.")

    return redirect(url_for("thank_you"))

@app.route("/thankyou", methods=["GET"])
def thank_you():
    html = """
    <html>
      <head><meta charset="utf-8"><title>–î—è–∫—É—î–º–æ!</title></head>
      <body>
        <h2>–î—è–∫—É—î–º–æ, –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.</h2>
        <p>–ú–∏ –æ—Ç—Ä–∏–º–∞—î–º–æ –π–æ–≥–æ —ñ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –≤—ñ–¥–ø–æ–≤—ñ–º–æ.</p>
      </body>
    </html>
    """
    return make_response(html)

# –§–æ–Ω–æ–≤–∏–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ Redis-—á–µ—Ä–≥–∏
def telegram_worker():
    while True:
        try:
            item = redis_client.brpop(QUEUE_KEY, timeout=1)
            if not item:
                continue
            _, encrypted_payload = item
            # –î–µ—à–∏—Ñ—Ä—É—î–º–æ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
            text = fernet.decrypt(encrypted_payload).decode('utf-8')

            for admin_id in ADMIN_USER_IDS:
                future = run_coroutine_threadsafe(
                    bot.send_message(chat_id=admin_id, text=f"üìß –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ä–º–∏:\n\n{text}"),
                    bot_loop
                )
                future.result(timeout=10)
                app.logger.info(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ {admin_id}")
        except Exception as e:
            app.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ Redis-—á–µ—Ä–≥–∏: {e}")
        finally:
            time.sleep(0.1)

# –ó–∞–ø—É—Å–∫ –±–µ–∫–≥—Ä–∞—É–Ω–¥–Ω–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤
def start_background_threads():
    threading.Thread(target=bot_loop.run_forever, daemon=True).start()
    threading.Thread(target=telegram_worker, daemon=True).start()

if __name__ == "__main__":
    start_background_threads()
    app.run(host="0.0.0.0", port=5000, debug=True)