# web_app/app.py

import os
import logging
import asyncio  # <- –¥–æ–¥–∞—î–º–æ
from flask import Flask, render_template, request, redirect, url_for, abort, make_response
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import padding
from telegram import Bot
from base64 import b64decode

# =================== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===================
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
KEYS_DIR = os.path.join(BASE_DIR, "keys")
PRIVATE_KEY_PATH = os.path.join(KEYS_DIR, "private_key.pem")
PUBLIC_KEY_PATH = os.path.join(KEYS_DIR, "public_key.pem")

TELEGRAM_BOT_TOKEN = "7888461204:AAEf1X2YtlV4-DMc6A5LQuQAqMU7bTJ4Tdg"
ADMIN_USER_IDS = [797316319]
# ======================================================

app = Flask(__name__)
app.logger.setLevel(logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram Bot API (—Ü–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π Bot –∑ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ python-telegram-bot v20+)
bot = Bot(token=TELEGRAM_BOT_TOKEN)


def load_private_key():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á —ñ–∑ —Ñ–∞–π–ª–∞ (PKCS#8)."""
    with open(PRIVATE_KEY_PATH, "rb") as key_file:
        private_key = serialization.load_pem_private_key(
            key_file.read(),
            password=None
        )
    return private_key


@app.after_request
def add_no_cache_headers(response):
    """
    –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —â–æ–± –∑–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ –∫–µ—à—É–≤–∞–Ω–Ω—è.
    """
    response.headers["Cache-Control"] = "no-store, no-cache, must-revalidate, max-age=0"
    response.headers["Pragma"] = "no-cache"
    response.headers["Expires"] = "0"
    return response


@app.route("/report", methods=["GET"])
def report_form():
    """
    –í—ñ–¥–¥–∞—î–º–æ HTML-—Å—Ç–æ—Ä—ñ–Ω–∫—É –∑ —Ñ–æ—Ä–º–æ—é.
    –ü–µ—Ä–µ–¥–∞—î–º–æ —É —à–∞–±–ª–æ–Ω public_key —É PEM-—Ñ–æ—Ä–º–∞—Ç—ñ.
    """
    try:
        with open(PUBLIC_KEY_PATH, "r") as f:
            public_pem = f.read()
    except FileNotFoundError:
        abort(500, description="–ü—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.")

    return render_template("report.html", public_key=public_pem)


@app.route("/submit", methods=["POST"])
def submit_report():
    """
    –ü—Ä–∏–π–º–∞—î–º–æ POST —ñ–∑ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º.
    –†–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î–º–æ –π–æ–≥–æ —ñ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–µ—Ä–µ–∑ Telegram Bot API.
    """
    encrypted_b64 = request.form.get("encrypted_message")
    if not encrypted_b64:
        abort(400, description="–ù–µ –Ω–∞–¥—ñ–π—à–ª–æ –ø–æ–ª–µ encrypted_message.")

    try:
        encrypted_bytes = b64decode(encrypted_b64)
    except Exception as e:
        app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ dekod—É–≤–∞–Ω–Ω—è base64: {e}")
        abort(400, description="–ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç).")

    private_key = load_private_key()

    try:
        decrypted = private_key.decrypt(
            encrypted_bytes,
            padding.PKCS1v15()
        )
        plain_text = decrypted.decode("utf-8")
    except Exception as e:
        app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∫–∏: {e}")
        abort(400, description="–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

    app.logger.info(f"–†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: {plain_text}")

    sent_count = 0
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ bot.send_message() —á–µ—Ä–µ–∑ asyncio.run(), —â–æ–± –¥–æ—á–µ–∫–∞—Ç–∏—Å—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ—Ä—É—Ç–∏–Ω–∏
    for admin_id in ADMIN_USER_IDS:
        try:
            asyncio.run(bot.send_message(chat_id=admin_id, text=f"üìß –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ä–º–∏:\n\n{plain_text}"))
            app.logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—É {admin_id}")
            sent_count += 1
        except Exception as e:
            app.logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É {admin_id}: {e}")

    app.logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {sent_count} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    return redirect(url_for("thank_you"))


@app.route("/thankyou", methods=["GET"])
def thank_you():
    html = """
    <html>
      <head>
        <meta charset="utf-8">
        <title>–î—è–∫—É—î–º–æ!</title>
      </head>
      <body>
        <h2>–î—è–∫—É—î–º–æ, –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.</h2>
        <p>–ú–∏ –æ—Ç—Ä–∏–º–∞—î–º–æ –π–æ–≥–æ —ñ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –≤—ñ–¥–ø–æ–≤—ñ–º–æ.</p>
      </body>
    </html>
    """
    response = make_response(html)
    return response


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask. –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É –±–∞–∂–∞–Ω–æ –≤–∂–µ —á–µ—Ä–µ–∑ HTTPS + gunicorn/uwsgi
    app.run(host="0.0.0.0", port=5000, debug=True)
