import os
import logging
import threading
import asyncio
from queue import Queue, Empty
from flask import Flask, render_template, request, redirect, url_for, abort, make_response
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding
from base64 import b64decode
from telegram import Bot
from telegram.request import HTTPXRequest
from asyncio import run_coroutine_threadsafe
import time

# ============ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ============
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
KEYS_DIR = os.path.join(BASE_DIR, "keys")
PRIVATE_KEY_PATH = os.path.join(KEYS_DIR, "private_key.pem")
PUBLIC_KEY_PATH = os.path.join(KEYS_DIR, "public_key.pem")

TELEGRAM_BOT_TOKEN = "7888461204:AAEf1X2YtlV4-DMc6A5LQuQAqMU7bTJ4Tdg"
ADMIN_USER_IDS = [797316319]
# ======================================

app = Flask(__name__)
app.logger.setLevel(logging.INFO)

# Telegram Bot –∑ –ø—É–ª–æ–º –∑‚Äô—î–¥–Ω–∞–Ω—å
request = HTTPXRequest(connection_pool_size=10)
bot = Bot(token=TELEGRAM_BOT_TOKEN, request=request)

# Event loop –¥–ª—è Telegram-–±–æ—Ç–∞
bot_loop = asyncio.new_event_loop()

# –ß–µ—Ä–≥–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
message_queue = Queue()


@app.before_first_request
def startup():
    """–ó–∞–ø—É—Å–∫–∞—î event loop —ñ –≤–æ—Ä–∫–µ—Ä –¥–ª—è —á–µ—Ä–≥–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
    threading.Thread(target=bot_loop.run_forever, daemon=True).start()
    threading.Thread(target=telegram_worker, daemon=True).start()


def telegram_worker():
    """–ü–æ—Å—Ç—ñ–π–Ω–æ –æ–±—Ä–æ–±–ª—è—î —á–µ—Ä–≥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ –Ω–∞–¥—Å–∏–ª–∞—î —ó—Ö –±–æ—Ç–æ–º."""
    while True:
        try:
            chat_id, text = message_queue.get(timeout=1)
            future = run_coroutine_threadsafe(
                bot.send_message(chat_id=chat_id, text=text),
                bot_loop
            )
            future.result(timeout=10)
            app.logger.info(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ {chat_id}")
        except Empty:
            continue  # –ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        except Exception as e:
            app.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        finally:
            time.sleep(0.1)  # –©–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ CPU


def load_private_key():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á."""
    with open(PRIVATE_KEY_PATH, "rb") as key_file:
        return serialization.load_pem_private_key(key_file.read(), password=None)


@app.after_request
def add_no_cache_headers(response):
    response.headers["Cache-Control"] = "no-store, no-cache, must-revalidate, max-age=0"
    response.headers["Pragma"] = "no-cache"
    response.headers["Expires"] = "0"
    return response


@app.route("/report", methods=["GET"])
def report_form():
    try:
        with open(PUBLIC_KEY_PATH, "r") as f:
            public_pem = f.read()
    except FileNotFoundError:
        abort(500, description="–ü—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.")
    return render_template("report.html", public_key=public_pem)


@app.route("/submit", methods=["POST"])
def submit_report():
    encrypted_b64 = request.form.get("encrypted_message")
    if not encrypted_b64:
        abort(400, description="–ù–µ –Ω–∞–¥—ñ–π—à–ª–æ –ø–æ–ª–µ encrypted_message.")

    try:
        encrypted_bytes = b64decode(encrypted_b64)
    except Exception as e:
        app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è base64: {e}")
        abort(400, description="–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∫–æ–¥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

    try:
        decrypted = load_private_key().decrypt(encrypted_bytes, padding.PKCS1v15())
        plain_text = decrypted.decode("utf-8")
    except Exception as e:
        app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∫–∏: {e}")
        abort(400, description="–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

    app.logger.info(f"–†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: {plain_text}")

    for admin_id in ADMIN_USER_IDS:
        message_queue.put((admin_id, f"üìß –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ä–º–∏:\n\n{plain_text}"))

    return redirect(url_for("thank_you"))


@app.route("/thankyou", methods=["GET"])
def thank_you():
    html = """
    <html>
      <head><meta charset="utf-8"><title>–î—è–∫—É—î–º–æ!</title></head>
      <body>
        <h2>–î—è–∫—É—î–º–æ, –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.</h2>
        <p>–ú–∏ –æ—Ç—Ä–∏–º–∞—î–º–æ –π–æ–≥–æ —ñ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –≤—ñ–¥–ø–æ–≤—ñ–º–æ.</p>
      </body>
    </html>
    """
    return make_response(html)


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)

